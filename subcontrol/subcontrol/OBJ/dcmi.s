; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --debug -c -S -o..\obj\dcmi.s --depend=..\obj\dcmi.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\HARDWARE\DCMI -I..\HARDWARE\OV2640 -I..\HARDWARE\TIMER -I..\HARDWARE\USART2 -I..\FWLIB\inc -I..\HARDWARE\LED -I..\HARDWARE\LCD -IE:\work\sizhou\Ywt\subcontrol\USER\RTE -IE:\Tool\MDK\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IE:\Tool\MDK\ARM\CMSIS\Include -IE:\Tool\MDK\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\dcmi.crf ..\HARDWARE\DCMI\dcmi.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

DCMI_IRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r0,#1
        BL       DCMI_GetITStatus
        CMP      r0,#1
        BNE      |L0.48|
        BL       jpeg_data_process
        MOVS     r0,#1
        BL       DCMI_ClearITPendingBit
        LDR      r0,|L0.628|
        LDR      r0,[r0,#0]
        CBNZ     r0,|L0.32|
        MOVS     r0,#1
        B        |L0.34|
|L0.32|
        MOVS     r0,#0
|L0.34|
        LDR      r1,|L0.628|
        STR      r0,[r1,#0]
        LDR      r0,|L0.632|
        LDRB     r0,[r0,#0]  ; ov_frame
        ADDS     r0,r0,#1
        LDR      r1,|L0.632|
        STRB     r0,[r1,#0]
|L0.48|
        POP      {r4,pc}
        ENDP

DCMI_DMA_Init PROC
        PUSH     {r4-r7,lr}
        SUB      sp,sp,#0x3c
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r7,r3
        MOVS     r1,#1
        LSLS     r0,r1,#22
        BL       RCC_AHB1PeriphClockCmd
        LDR      r0,|L0.636|
        BL       DMA_DeInit
        NOP      
|L0.78|
        LDR      r0,|L0.636|
        BL       DMA_GetCmdStatus
        CMP      r0,#0
        BNE      |L0.78|
        MOV      r0,#0x2000000
        STR      r0,[sp,#0]
        LDR      r0,|L0.640|
        STR      r0,[sp,#4]
        STR      r4,[sp,#8]
        MOVS     r0,#0
        STR      r0,[sp,#0xc]
        STR      r5,[sp,#0x10]
        STR      r0,[sp,#0x14]
        STR      r7,[sp,#0x18]
        MOV      r0,#0x1000
        STR      r0,[sp,#0x1c]
        STR      r6,[sp,#0x20]
        ASRS     r0,r0,#4
        STR      r0,[sp,#0x24]
        LSLS     r0,r0,#9
        STR      r0,[sp,#0x28]
        MOVS     r0,#4
        STR      r0,[sp,#0x2c]
        MOVS     r0,#3
        STR      r0,[sp,#0x30]
        MOVS     r0,#0
        STR      r0,[sp,#0x34]
        STR      r0,[sp,#0x38]
        MOV      r1,sp
        LDR      r0,|L0.636|
        BL       DMA_Init
        ADD      sp,sp,#0x3c
        POP      {r4-r7,pc}
        ENDP

My_DCMI_Init PROC
        PUSH     {r1-r3,lr}
        MOVS     r1,#1
        MOVS     r0,#0x17
        BL       RCC_AHB1PeriphClockCmd
        MOVS     r1,#1
        MOV      r0,r1
        BL       RCC_AHB2PeriphClockCmd
        MOVS     r0,#0x50
        STR      r0,[sp,#4]
        MOVS     r0,#2
        STRB     r0,[sp,#8]
        MOVS     r0,#0
        STRB     r0,[sp,#0xa]
        MOVS     r0,#3
        STRB     r0,[sp,#9]
        MOVS     r0,#1
        STRB     r0,[sp,#0xb]
        ADD      r1,sp,#4
        LDR      r0,|L0.644|
        BL       GPIO_Init
        MOVS     r0,#0xc0
        STR      r0,[sp,#4]
        ADD      r1,sp,#4
        LDR      r0,|L0.648|
        BL       GPIO_Init
        MOV      r0,#0xbc0
        STR      r0,[sp,#4]
        ADD      r1,sp,#4
        LDR      r0,|L0.652|
        BL       GPIO_Init
        MOVS     r0,#0x60
        STR      r0,[sp,#4]
        ADD      r1,sp,#4
        LDR      r0,|L0.656|
        BL       GPIO_Init
        MOVS     r2,#0xd
        MOVS     r1,#4
        LDR      r0,|L0.644|
        BL       GPIO_PinAFConfig
        MOVS     r2,#0xd
        MOVS     r1,#6
        LDR      r0,|L0.644|
        BL       GPIO_PinAFConfig
        MOVS     r2,#0xd
        MOVS     r1,#7
        LDR      r0,|L0.648|
        BL       GPIO_PinAFConfig
        MOVS     r2,#0xd
        MOVS     r1,#6
        LDR      r0,|L0.652|
        BL       GPIO_PinAFConfig
        MOVS     r2,#0xd
        MOVS     r1,#7
        LDR      r0,|L0.652|
        BL       GPIO_PinAFConfig
        MOVS     r2,#0xd
        MOVS     r1,#8
        LDR      r0,|L0.652|
        BL       GPIO_PinAFConfig
        MOVS     r2,#0xd
        MOVS     r1,#9
        LDR      r0,|L0.652|
        BL       GPIO_PinAFConfig
        MOVS     r2,#0xd
        MOVS     r1,#0xb
        LDR      r0,|L0.652|
        BL       GPIO_PinAFConfig
        MOVS     r2,#0xd
        MOVS     r1,#6
        LDR      r0,|L0.648|
        BL       GPIO_PinAFConfig
        MOVS     r2,#0xd
        MOVS     r1,#5
        LDR      r0,|L0.656|
        BL       GPIO_PinAFConfig
        MOVS     r2,#0xd
        MOVS     r1,#6
        LDR      r0,|L0.656|
        BL       GPIO_PinAFConfig
        BL       DCMI_DeInit
        MOVS     r0,#0
        LDR      r1,|L0.660|
        STRH     r0,[r1,#0]
        STRH     r0,[r1,#0xa]
        STRH     r0,[r1,#0xc]
        STRH     r0,[r1,#8]
        MOVS     r0,#0x20
        STRH     r0,[r1,#4]
        MOVS     r0,#0
        STRH     r0,[r1,#2]
        STRH     r0,[r1,#6]
        MOV      r0,r1
        BL       DCMI_Init
        MOVS     r1,#1
        MOV      r0,r1
        BL       DCMI_ITConfig
        MOVS     r0,#1
        BL       DCMI_Cmd
        MOVS     r0,#0x4e
        STRB     r0,[sp,#0]
        MOVS     r0,#1
        STRB     r0,[sp,#1]
        MOVS     r0,#2
        STRB     r0,[sp,#2]
        MOVS     r0,#1
        STRB     r0,[sp,#3]
        MOV      r0,sp
        BL       NVIC_Init
        POP      {r1-r3,pc}
        ENDP

DCMI_Start PROC
        PUSH     {r4,lr}
        MOVS     r1,#0
        MOV      r0,r1
        BL       LCD_SetCursor
        BL       LCD_WriteRAM_Prepare
        MOVS     r1,#1
        LDR      r0,|L0.636|
        BL       DMA_Cmd
        MOVS     r0,#1
        BL       DCMI_CaptureCmd
        POP      {r4,pc}
        ENDP

DCMI_Stop PROC
        PUSH     {r4,lr}
        MOVS     r0,#0
        BL       DCMI_CaptureCmd
        NOP      
|L0.472|
        LDR      r0,|L0.640|
        SUBS     r0,r0,#0x28
        LDR      r0,[r0,#0]
        AND      r0,r0,#1
        CMP      r0,#0
        BNE      |L0.472|
        MOVS     r1,#0
        LDR      r0,|L0.636|
        BL       DMA_Cmd
        POP      {r4,pc}
        ENDP

DCMI_Set_Window PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r7,r1
        MOV      r4,r2
        MOV      r5,r3
        BL       DCMI_Stop
        MOV      r0,#0xffff
        BL       LCD_Clear
        MOV      r3,r5
        MOV      r2,r4
        MOV      r1,r7
        MOV      r0,r6
        BL       LCD_Set_Window
        MOV      r1,r5
        MOV      r0,r4
        BL       OV2640_OutSize_Set
        MOVS     r1,#0
        MOV      r0,r1
        BL       LCD_SetCursor
        BL       LCD_WriteRAM_Prepare
        MOVS     r1,#1
        LDR      r0,|L0.636|
        BL       DMA_Cmd
        MOVS     r0,#1
        BL       DCMI_CaptureCmd
        POP      {r4-r8,pc}
        ENDP

DCMI_CR_Set PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r6,r1
        MOV      r5,r2
        BL       DCMI_DeInit
        MOVS     r0,#0
        LDR      r1,|L0.660|
        STRH     r0,[r1,#0]
        STRH     r0,[r1,#0xa]
        STRH     r0,[r1,#0xc]
        LSLS     r0,r6,#6
        STRH     r0,[r1,#8]
        LSLS     r0,r4,#5
        STRH     r0,[r1,#4]
        MOVS     r0,#0
        STRH     r0,[r1,#2]
        LSLS     r0,r5,#7
        STRH     r0,[r1,#6]
        MOV      r0,r1
        BL       DCMI_Init
        MOVS     r0,#1
        BL       DCMI_CaptureCmd
        MOVS     r0,#1
        BL       DCMI_Cmd
        POP      {r4-r6,pc}
        ENDP

|L0.628|
        DCD      0x424282a8
|L0.632|
        DCD      ov_frame
|L0.636|
        DCD      0x40026428
|L0.640|
        DCD      0x50050028
|L0.644|
        DCD      0x40020000
|L0.648|
        DCD      0x40020400
|L0.652|
        DCD      0x40020800
|L0.656|
        DCD      0x40021000
|L0.660|
        DCD      DCMI_InitStructure

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=1

DCMI_InitStructure
        %        14

        AREA ||.data||, DATA, ALIGN=0

ov_frame
        DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\DCMI\\dcmi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_dcmi_c_ov_frame____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___6_dcmi_c_ov_frame____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_dcmi_c_ov_frame____REVSH|
#line 144
|__asm___6_dcmi_c_ov_frame____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT DCMI_IRQHandler [CODE]
        EXPORT DCMI_DMA_Init [CODE]
        EXPORT My_DCMI_Init [CODE]
        EXPORT DCMI_Start [CODE]
        EXPORT DCMI_Stop [CODE]
        EXPORT DCMI_Set_Window [CODE]
        EXPORT DCMI_CR_Set [CODE]
        EXPORT DCMI_InitStructure [DATA,SIZE=14]
        EXPORT ov_frame [DATA,SIZE=1]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT DCMI_GetITStatus [CODE]
        IMPORT jpeg_data_process [CODE]
        IMPORT DCMI_ClearITPendingBit [CODE]
        IMPORT RCC_AHB1PeriphClockCmd [CODE]
        IMPORT DMA_DeInit [CODE]
        IMPORT DMA_GetCmdStatus [CODE]
        IMPORT DMA_Init [CODE]
        IMPORT RCC_AHB2PeriphClockCmd [CODE]
        IMPORT GPIO_Init [CODE]
        IMPORT GPIO_PinAFConfig [CODE]
        IMPORT DCMI_DeInit [CODE]
        IMPORT DCMI_Init [CODE]
        IMPORT DCMI_ITConfig [CODE]
        IMPORT DCMI_Cmd [CODE]
        IMPORT NVIC_Init [CODE]
        IMPORT LCD_SetCursor [CODE]
        IMPORT LCD_WriteRAM_Prepare [CODE]
        IMPORT DMA_Cmd [CODE]
        IMPORT DCMI_CaptureCmd [CODE]
        IMPORT LCD_Clear [CODE]
        IMPORT LCD_Set_Window [CODE]
        IMPORT OV2640_OutSize_Set [CODE]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
